compose = \fns ->
  fns.reduceRight composeReducer

composeReducer = (composedFn, fn) -> (args...) ->
  fn (composedFn args...)

escapeSeparators = \str ->
  separators = /[\-\.\+\*]/g
  # Double backslash is needed to convert strings to regex escape sequences.
  str.replace (separators, '\\$&')

extend = (base, objects...) ->
  for obj in objects
    for own key of obj
      base[key] = obj[key]
  return base

getCookie = \key ->
  return null unless key 
  encodedKey   = escapeSeparators (encodeURIComponent key)
  cookieRegex  = /// (?:^|.*;) \s* #{encodedKey} \s* = \s* ([^;]*) ///
  encodedValue = (document.cookie.match cookieRegex)[1]
  (decodeURIComponent encodedValue) || null

identity = \val ->
  val

isArray = \val ->
  if Array.isArray then Array.isArray val else val instanceof Array

isObject = \val ->
  Object.prototype.toString.call val == '[object Object]'

patch = \opts ->
  { data, load, path } = opts
  xhr = new XMLHttpRequest ()
  xhr.addEventListener ('load', load)
  xhr.open ('PATCH', path)
  xhr.setRequestHeader (
    'Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')
  xhr.setRequestHeader ('X-Requested-With', 'XMLHttpRequest')
  xhr.send data
  return false

pluralize = (count, word) ->
  if count == 1 then word else word + 's'

set = (key, prop, compositeValue) ->
  copy = shallowCopy compositeValue
  copy[key] = prop
  copy

shallowCopy = \val ->
  switch
    when isObject val
      copy = {}
      copy[key] = prop for own key, prop of val
      copy
    when isArray val
      val.map identity
    else
      val

store = (namespace, data) ->
  if data
    localStorage.setItem (namespace, stringify data)
    return data

  data = localStorage.getItem namespace
  if data then JSON.parse data else []

_uuid = (i, j) ->
  nbr = switch i
    when 12 then 4
    when 16 then j & 3 | 8
    else j
  nbr.toString 16

uuid = ->
  id = ''
  for i in [0...32]
    random = Math.random () * 16 | 0
    id += '-' if i in signposts
    id += _uuid (i, random)
  return id

signposts     = [8, 12, 16, 20]
{ stringify } = JSON

module.exports = {
  compose
  extend
  getCookie
  isObject
  patch
  pluralize
  set
  store
  uuid
}
