{ appStateProperty }           = require '../vendor/Aspen'
{ getCookie, httpPatch, uuid } = require '../utilities'
{ filtering }                  = require('../vendor/Pando').transforms
{ url }                        = require '../app-config'

{ add
  recaption
  remove
  removeCompleted
  toggle
  toggleAll
} = require '../model/todoList'

{ reset
  resetEditing
  resetMode
  resetTodos
} = require '../model/appState'

changeModeTo = \mode -> () -> \appState ->
  resetMode (appState, mode)

editAppState = \capsule \appState ->
  todo = findTodo (appState.todos, capsule.id)
  storeOrigTitle todo.title
  resetEditing (appState, capsule.id)

editMode = \capsule \appState ->
  mode = extractMode capsule
  resetMode (appState, mode)

encode = ; encodeURIComponent JSON.stringify ;

_endEditing = (text, id) -> (appState) ->
  manage = if text then recaption else remove
  newTodos = manage (appState.todos, id, text)
  reset (appState, { editing: null, todos: newTodos })

endEditing = \getText \capsule ->
  text = getText ()
  setEventTgtValue (capsule, text)
  _endEditing (text, capsule.id)

extractMode = \capsule ->
  route = capsule.event
  switch route.slice 1
    when 'active'    then 'active'
    when 'completed' then 'completed'
    else 'all'

_extractNewTodo = \title \appState ->
  return appState unless title
  resetTodos (appState, add (appState.todos, title))

extractNewTodo = \capsule ->
  caption = capsule.event.target.value.trim ()
  setEventTgtValue (capsule, '')
  _extractNewTodo caption

filteringKey = \key ->
  filtering \capsule -> capsule.event.keyCode == key

findTodo = (todos, id) ->
  for todo, index in todos
    return todo if todo.id == id

getPatchConfig = \appState ->
  data : getUrlEncodedTodos appState
  path : patchRoute

getUrlEncodedTodos = \appState ->
  "todos=#{encode(appState.todos)}"

getUserID = ->
  getCookie 'aspenID'

removeCompletedTodos = \capsule \appState ->
  resetTodos (appState, removeCompleted appState.todos)

removeTodo = \capsule \appState ->
  resetTodos (appState, remove (appState.todos, capsule.id))

[restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle] = do ->
  editText     = null
  originalText = null

  restoreOrigTitle = ->
    editText = originalText
  saveCurrentTitle = ->
    if editText then editText.trim () else editText
  storeOrigTitle = \title ->
    editText = originalText = title
  storeTitle = \title ->
    editText = title

  [restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle]

setEventTgtValue = (capsule, text) ->
  capsule.event.target.value = text

synchronizeDb = \appState ->
  httpPatch (getPatchConfig appState)
  appState

toggleAllTodos = \capsule \appState ->
  resetTodos (appState, (toggleAll appState.todos))

toggleTodo = \capsule \appState ->
  resetTodos (appState, toggle (appState.todos, capsule.id))

filteringEnter  = filteringKey 13
filteringEscape = filteringKey 27
patchRoute      = url + "/users/#{getUserID ()}/todos"

module.exports = {
  changeModeTo
  editAppState
  editMode
  endEditing
  extractNewTodo
  filteringEnter
  filteringEscape
  removeCompletedTodos
  removeTodo
  restoreOrigTitle
  toggleAllTodos
  toggleTodo
  saveCurrentTitle 
  storeTitle
  synchronizeDb
}
